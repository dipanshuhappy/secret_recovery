{"version":3,"file":"index.js","mappings":";;;;;AAAA,YAAY,2BAA2B;AACvC,WAAW,iCAAiC;AAC5C;AACA,YAAY,aAAa;AACzB,YAAY,mBAAmB;AAC/B,YAAY,YAAY;AACxmEAAmE,YAAY;AAC/E;AACA;AACA;AACA,SAAS,yBAAyB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA;AACA;AACA,SAAS,yBAAyB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,IAAI;AACtB;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gCAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,0CAA0C;AAC1G;AACA,QAAQ;AACR,MAAM;AACN;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,wCAAwC,IAAI;AAC5C;AACA,+E","sources":["webpack://app_frontend_js/./src/app_frontend_js/src/index.js"],"sourcesContent":["// import { createActor, app_backend } from \"../../declarations/app_backend\";\r\n// import {createActor as createDkim, dkim} from \"../../declarations/dkim\";\r\n// import * as vetkd from \"ic-vetkd-utils\";\r\n// import { AuthClient } from \"@dfinity/auth-client\"\r\n// import { HttpAgent, Actor } from \"@dfinity/agent\";\r\n// import { Principal } from \"@dfinity/principal\";\r\n\r\n// let fetched_symmetric_key = null;\r\n// let app_backend_actor = app_backend;\r\n// let app_backend_principal = await Actor.agentOf(app_backend_actor).getPrincipal();\r\n\r\n// let dkim_actor = dkim;\r\n// document.getElementById(\"principal\").innerHTML = annotated_principal(app_backend_principal);\r\n\r\n// document.getElementById(\"get_symmetric_key_form\").addEventListener(\"submit\", async (e) => {\r\n//   e.preventDefault();\r\n//   const button = e.target.querySelector(\"button\");\r\n//   button.setAttribute(\"disabled\", true);\r\n//   const result = document.getElementById(\"get_symmetric_key_result\");\r\n\r\n//   result.innerText = \"Fetching symmetric key...\";\r\n//   const aes_256_key = await get_aes_256_gcm_key();\r\n//   result.innerText = \"Done. AES-GCM-256 key available for local usage.\";\r\n\r\n//   button.removeAttribute(\"disabled\");\r\n\r\n//   fetched_symmetric_key = aes_256_key;\r\n//   update_plaintext_button_state();\r\n//   update_ciphertext_button_state();\r\n\r\n//   return false;\r\n// });\r\n\r\n// document.getElementById(\"encrypt_form\").addEventListener(\"submit\", async (e) => {\r\n//   e.preventDefault();\r\n//   const button = e.target.querySelector(\"button\");\r\n//   button.setAttribute(\"disabled\", true);\r\n//   const result = document.getElementById(\"encrypt_result\");\r\n\r\n//   result.innerText = \"Encrypting...\";\r\n//   const ciphertext = await aes_gcm_encrypt(document.getElementById(\"plaintext\").value, fetched_symmetric_key);\r\n\r\n//   result.innerText = \"ciphertext: \" + ciphertext;\r\n\r\n//   button.removeAttribute(\"disabled\");\r\n//   return false;\r\n// });\r\n\r\n// document.getElementById(\"decrypt_form\").addEventListener(\"submit\", async (e) => {\r\n//   e.preventDefault();\r\n//   const button = e.target.querySelector(\"button\");\r\n//   button.setAttribute(\"disabled\", true);\r\n//   const result = document.getElementById(\"decrypt_result\");\r\n\r\n//   result.innerText = \"Decrypting...\";\r\n//   try {\r\n//     const plaintext = await aes_gcm_decrypt(document.getElementById(\"ciphertext\").value, fetched_symmetric_key);\r\n//     result.innerText = \"plaintext: \" + plaintext;\r\n//   } catch (e) {\r\n//     result.innerText = \"Error: \" + e;\r\n//   }\r\n\r\n//   button.removeAttribute(\"disabled\");\r\n//   return false;\r\n// });\r\n\r\n// document.getElementById(\"plaintext\").addEventListener(\"keyup\", async (e) => {\r\n//   update_plaintext_button_state();\r\n// });\r\n\r\n// document.getElementById(\"ciphertext\").addEventListener(\"keyup\", async (e) => {\r\n//   update_ciphertext_button_state();\r\n// });\r\n\r\n// function update_plaintext_button_state() {\r\n//   const submit_plaintext_button = document.getElementById(\"submit_plaintext\");\r\n//   if (document.getElementById(\"plaintext\").value === \"\" || fetched_symmetric_key === null) {\r\n//     submit_plaintext_button.setAttribute(\"disabled\", true);\r\n//   } else {\r\n//     submit_plaintext_button.removeAttribute(\"disabled\");\r\n//   }\r\n// }\r\n\r\n// function update_ciphertext_button_state() {\r\n//   const submit_ciphertext_button = document.getElementById(\"submit_ciphertext\");\r\n//   if (document.getElementById(\"ciphertext\").value === \"\" || fetched_symmetric_key === null) {\r\n//     submit_ciphertext_button.setAttribute(\"disabled\", true);\r\n//   } else {\r\n//     submit_ciphertext_button.removeAttribute(\"disabled\");\r\n//   }\r\n// }\r\n\r\n// async function get_aes_256_gcm_key() {\r\n//   const seed = window.crypto.getRandomValues(new Uint8Array(32));\r\n//   const tsk = new vetkd.TransportSecretKey(seed);\r\n//   const ek_bytes_hex = await app_backend_actor.encrypted_symmetric_key_for_caller(tsk.public_key());\r\n//   const pk_bytes_hex = await app_backend_actor.symmetric_key_verification_key();\r\n//   return tsk.decrypt_and_hash(\r\n//     hex_decode(ek_bytes_hex),\r\n//     hex_decode(pk_bytes_hex),\r\n//     app_backend_principal.toUint8Array(),\r\n//     32,\r\n//     new TextEncoder().encode(\"aes-256-gcm\")\r\n//   );\r\n// }\r\n\r\n// async function aes_gcm_encrypt(message, rawKey) {\r\n//   const iv = window.crypto.getRandomValues(new Uint8Array(12)); // 96-bits; unique per message\r\n//   const aes_key = await window.crypto.subtle.importKey(\"raw\", rawKey, \"AES-GCM\", false, [\"encrypt\"]);\r\n//   const message_encoded = new TextEncoder().encode(message);\r\n//   const ciphertext_buffer = await window.crypto.subtle.encrypt(\r\n//     { name: \"AES-GCM\", iv: iv },\r\n//     aes_key,\r\n//     message_encoded\r\n//   );\r\n//   const ciphertext = new Uint8Array(ciphertext_buffer);\r\n//   var iv_and_ciphertext = new Uint8Array(iv.length + ciphertext.length);\r\n//   iv_and_ciphertext.set(iv, 0);\r\n//   iv_and_ciphertext.set(ciphertext, iv.length);\r\n//   return hex_encode(iv_and_ciphertext);\r\n// }\r\n\r\n// async function aes_gcm_decrypt(ciphertext_hex, rawKey) {\r\n//   const iv_and_ciphertext = hex_decode(ciphertext_hex);\r\n//   const iv = iv_and_ciphertext.subarray(0, 12); // 96-bits; unique per message\r\n//   const ciphertext = iv_and_ciphertext.subarray(12);\r\n//   const aes_key = await window.crypto.subtle.importKey(\"raw\", rawKey, \"AES-GCM\", false, [\"decrypt\"]);\r\n//   let decrypted = await window.crypto.subtle.decrypt(\r\n//     { name: \"AES-GCM\", iv: iv },\r\n//     aes_key,\r\n//     ciphertext\r\n//   );\r\n//   return new TextDecoder().decode(decrypted);\r\n// }\r\n\r\n// document.getElementById(\"ibe_encrypt_form\").addEventListener(\"submit\", async (e) => {\r\n//   e.preventDefault();\r\n//   const button = e.target.querySelector(\"button\");\r\n//   button.setAttribute(\"disabled\", true);\r\n//   const result = document.getElementById(\"ibe_encrypt_result\");\r\n\r\n//   try {\r\n//     const ibe_ciphertext = await ibe_encrypt(document.getElementById(\"ibe_plaintext\").value);\r\n//     result.innerText = \"IBE ciphertext: \" + ibe_ciphertext;\r\n//   } catch (e) {\r\n//     result.innerText = \"Error: \" + e;\r\n//   }\r\n\r\n//   button.removeAttribute(\"disabled\");\r\n//   return false;\r\n// });\r\n\r\n// document.getElementById(\"register_secret\").addEventListener(\"submit\", async (e) => {\r\n//   e.preventDefault();\r\n//   const button = e.target.querySelector(\"button\");\r\n//   button.setAttribute(\"disabled\", true);\r\n//   const result = document.getElementById(\"email_result\");\r\n  \r\n//   let otp;\r\n//   try {\r\n//     // const ibe_ciphertext = await ibe_encrypt(document.getElementById(\"ibe_plaintext\").value);\r\n//     otp = await dkim_actor.register_email(document.getElementById(\"email\").value);\r\n//     result.innerText = \"IBE ciphertext: \" + ibe_ciphertext;\r\n//   } catch (e) {\r\n//     result.innerText = \"Error: \" + e;\r\n//   }\r\n//   result.innerText = otp.Ok.toString();\r\n\r\n//   // button.removeAttribute(\"disabled\");\r\n//   return false;\r\n// });\r\n\r\n// document.getElementById(\"get_otp_secret\").addEventListener(\"click\", async (e) => {\r\n//   e.preventDefault();\r\n//   console.log(\"huuiiii\")\r\n//   console.log(document.getElementById(\"email\").value,\"valuuue\")\r\n//   const otp = await dkim_actor.get_otp(document.getElementById(\"email\").value);\r\n//   console.log({otp},\"otppp\")\r\n//   document.getElementById(\"secret_otp\").innerText = otp.Ok.toString();\r\n// });\r\n\r\n// document.getElementById(\"finalize_email\").addEventListener(\"submit\", async (e) => {\r\n//   e.preventDefault();\r\n//   const button = e.target.querySelector(\"button\");\r\n//   // button.setAttribute(\"disabled\", true);\r\n//   // const result = document.getElementById(\"finalize_result\");\r\n  \r\n//   try {\r\n//     const ibe_ciphertext = await ibe_encrypt_by_email(document.getElementById(\"secret\").value);\r\n//     console.log(ibe_ciphertext)\r\n//     const  text_raw = document.getElementById(\"raw_email_textarea\").value;\r\n//     console.log({text_raw})\r\n//     const time  = await dkim_actor.finalize_secret_with_email(text_raw,ibe_ciphertext);\r\n//     if(time.Err){\r\n//       console.error(time.Err)\r\n//     }\r\n//     alert(\"DOne\")\r\n//     document.getElementById(\"finalize_result\").innerText = \"IBE ciphertext: \" + ibe_ciphertext;\r\n//   } catch (e) {\r\n//     // console.error(e)\r\n//     // result.innerText = \"Error: \" + e;\r\n//   }\r\n//   result.innerText = `${result.innerText} Is doneeee`\r\n\r\n//   // button.removeAttribute(\"disabled\");\r\n//   return false;\r\n// });\r\n// document.getElementById(\"get_secret\").addEventListener(\"submit\", async (e) => {\r\n//   e.preventDefault();\r\n//   // const button = e.target.querySelector(\"button\");\r\n//   // button.setAttribute(\"disabled\", true);\r\n//   // const result = document.getElementById(\"email_result\");\r\n//   // let email = document.getElementById(\"email\").value;\r\n//   // let secret = await dkim_actor.get_secret(email);\r\n//   // result.innerText = secret.Ok.toString();\r\n//   // button.removeAttribute(\"disabled\");\r\n\r\n\r\n//   try {\r\n//     const  text_raw = document.getElementById(\"get_secret_email_textarea\").value;\r\n//     const secret = await dkim_actor.retrieve_secret(text_raw);\r\n//     console.log({secret},\"secrettt\")\r\n//     document.getElementById(\"secret_result\").innerText = \"Secret: \" + secret.Ok.toString();\r\n//     const ibe_plaintext = await ibe_decrypt_by_email(secret.Ok.toString(),document.getElementById(\"email\").value);\r\n//     console.log({ibe_plaintext},\"plain texttttttttt\")\r\n//     document.getElementById(\"secret_result\").innerText = \"IBE plaintext: \" + ibe_plaintext;\r\n    \r\n//     // document.\r\n//   }\r\n//   catch (e) {\r\n//     console.error(e)\r\n//     document.getElementById(\"secret_result\").innerText = \"Error: \" + e;\r\n//   }\r\n\r\n//   return false;\r\n// })\r\n// document.getElementById(\"ibe_decrypt_form\").addEventListener(\"submit\", async (e) => {\r\n//   e.preventDefault();\r\n//   const button = e.target.querySelector(\"button\");\r\n//   button.setAttribute(\"disabled\", true);\r\n//   const result = document.getElementById(\"ibe_decrypt_result\");\r\n\r\n//   try {\r\n//     const ibe_plaintext = await ibe_decrypt(document.getElementById(\"ibe_ciphertext\").value);\r\n//     result.innerText = \"IBE plaintext: \" + ibe_plaintext;\r\n//   } catch (e) {\r\n//     result.innerText = \"Error: \" + e;\r\n//   }\r\n\r\n//   button.removeAttribute(\"disabled\");\r\n//   return false;\r\n// });\r\n\r\n// document.getElementById(\"ibe_plaintext\").addEventListener(\"keyup\", async (e) => {\r\n//   update_ibe_encrypt_button_state();\r\n// });\r\n\r\n// document.getElementById(\"ibe_principal\").addEventListener(\"keyup\", async (e) => {\r\n//   update_ibe_encrypt_button_state();\r\n// });\r\n\r\n// document.getElementById(\"ibe_ciphertext\").addEventListener(\"keyup\", async (e) => {\r\n//   update_ibe_decrypt_button_state();\r\n// });\r\n\r\n// function update_ibe_encrypt_button_state() {\r\n//   const ibe_encrypt_button = document.getElementById(\"ibe_encrypt\");\r\n//   if (document.getElementById(\"ibe_plaintext\").value === \"\" || document.getElementById(\"ibe_principal\").value === \"\") {\r\n//     ibe_encrypt_button.setAttribute(\"disabled\", true);\r\n//   } else {\r\n//     ibe_encrypt_button.removeAttribute(\"disabled\");\r\n//   }\r\n// }\r\n\r\n// function update_ibe_decrypt_button_state() {\r\n//   const ibe_decrypt_button = document.getElementById(\"ibe_decrypt\");\r\n//   if (document.getElementById(\"ibe_ciphertext\").value === \"\") {\r\n//     ibe_decrypt_button.setAttribute(\"disabled\", true);\r\n//   } else {\r\n//     ibe_decrypt_button.removeAttribute(\"disabled\");\r\n//   }\r\n// }\r\n\r\n// async function ibe_encrypt(message) {\r\n//   document.getElementById(\"ibe_encrypt_result\").innerText = \"Fetching IBE encryption key...\"\r\n//   const pk_bytes_hex = await app_backend_actor.ibe_encryption_key();\r\n\r\n//   document.getElementById(\"ibe_encrypt_result\").innerText = \"Preparing IBE-encryption...\"\r\n//   const message_encoded = new TextEncoder().encode(message);\r\n//   const seed = window.crypto.getRandomValues(new Uint8Array(32));\r\n//   let ibe_principal = Principal.fromText(document.getElementById(\"ibe_principal\").value);\r\n\r\n//   document.getElementById(\"ibe_encrypt_result\").innerText = \"IBE-encrypting for principal\" + ibe_principal.toText() + \"...\";\r\n//   const ibe_ciphertext = vetkd.IBECiphertext.encrypt(\r\n//     hex_decode(pk_bytes_hex),\r\n//     ibe_principal.toUint8Array(),\r\n//     message_encoded,\r\n//     seed\r\n//   );\r\n//   return hex_encode(ibe_ciphertext.serialize());\r\n// }\r\n// function stringToUint8Array(str) {\r\n//   // Encode string to UTF-8\r\n//   const utf8Encoder = new TextEncoder();\r\n//   const bytes = utf8Encoder.encode(str);\r\n  \r\n//   // Create Uint8Array from the UTF-8 encoded bytes\r\n//   const uint8Array = new Uint8Array(bytes);\r\n  \r\n//   return uint8Array;\r\n// }\r\n\r\n// async function ibe_encrypt_by_email(message) {\r\n//   console.log(\"hiii\")\r\n//   document.getElementById(\"finalize_result\").innerText = \"Fetching IBE encryption key...\"\r\n//   const pk_bytes_hex = await app_backend_actor.ibe_encryption_key().catch((e) => console.error(e));\r\n\r\n//   document.getElementById(\"finalize_result\").innerText = \"Preparing IBE-encryption...\"\r\n//   console.log(\"hiiii\")\r\n//   const message_encoded = new TextEncoder().encode(message);\r\n//   console.log(message_encoded)\r\n//   const seed = window.crypto.getRandomValues(new Uint8Array(32));\r\n//   let email = document.getElementById(\"email\").value;\r\n//   console.log(email,\"eeeeeeeeeeeeeeeeeeeeeeeeeee\")\r\n//   document.getElementById(\"finalize_result\").innerText = \"IBE-encrypting for email\" + email + \"...\";\r\n//   const ibe_ciphertext = vetkd.IBECiphertext.encrypt(\r\n//     hex_decode(pk_bytes_hex),\r\n//     stringToUint8Array(email),\r\n//     message_encoded,\r\n//     seed\r\n//   );\r\n//   return hex_encode(ibe_ciphertext.serialize());\r\n// }\r\n// async function ibe_decrypt(ibe_ciphertext_hex) {\r\n//   document.getElementById(\"ibe_decrypt_result\").innerText = \"Preparing IBE-decryption...\"\r\n//   const tsk_seed = window.crypto.getRandomValues(new Uint8Array(32));\r\n//   const tsk = new vetkd.TransportSecretKey(tsk_seed);\r\n//   document.getElementById(\"ibe_decrypt_result\").innerText = \"Fetching IBE decryption key...\"\r\n//   const ek_bytes_hex = await app_backend_actor.encrypted_ibe_decryption_key_for_caller(tsk.public_key());\r\n//   document.getElementById(\"ibe_decrypt_result\").innerText = \"Fetching IBE enryption key (needed for verification)...\"\r\n//   const pk_bytes_hex = await app_backend_actor.ibe_encryption_key();\r\n\r\n//   const k_bytes = tsk.decrypt(\r\n//     hex_decode(ek_bytes_hex),\r\n//     hex_decode(pk_bytes_hex),\r\n//     stringToUint8Array(email)\r\n//   );\r\n\r\n//   const ibe_ciphertext = vetkd.IBECiphertext.deserialize(hex_decode(ibe_ciphertext_hex));\r\n//   const ibe_plaintext = ibe_ciphertext.decrypt(k_bytes);\r\n//   return new TextDecoder().decode(ibe_plaintext);\r\n// }\r\n\r\n// async function ibe_decrypt_by_email(ibe_ciphertext_hex,email) {\r\n//   document.getElementById(\"ibe_decrypt_result\").innerText = \"Preparing IBE-decryption...\"\r\n//   const tsk_seed = window.crypto.getRandomValues(new Uint8Array(32));\r\n//   const tsk = new vetkd.TransportSecretKey(tsk_seed);\r\n//   document.getElementById(\"ibe_decrypt_result\").innerText = \"Fetching IBE decryption key...\"\r\n//   const ek_bytes_hex = await app_backend_actor.encrypted_ibe_decryption_key_email(tsk.public_key(),email);\r\n//   document.getElementById(\"ibe_decrypt_result\").innerText = \"Fetching IBE enryption key (needed for verification)...\"\r\n//   const pk_bytes_hex = await app_backend_actor.ibe_encryption_key();\r\n//   console.log({ek_bytes_hex,pk_bytes_hex,email});\r\n//   console.log(stringToUint8Array(email),\"emaillll\")\r\n//   const k_bytes = tsk.decrypt(\r\n//     hex_decode(ek_bytes_hex),\r\n//     hex_decode(pk_bytes_hex),\r\n//     stringToUint8Array(email)\r\n//   );\r\n\r\n//   const ibe_ciphertext = vetkd.IBECiphertext.deserialize(hex_decode(ibe_ciphertext_hex));\r\n//   const ibe_plaintext = ibe_ciphertext.decrypt(k_bytes);\r\n\r\n//   console.log({ibe_plaintext},\"jjskfldlj\")\r\n//   const a = new TextDecoder('utf-8').decode(ibe_plaintext);\r\n//   console.log(a,\"textsldflj\")\r\n//   return String.fromCharCode.apply(null,ibe_plaintext);\r\n// }\r\n\r\n// document.getElementById(\"login\").onclick = async (e) => {\r\n//   e.preventDefault();\r\n//   let authClient = await AuthClient.create();\r\n//   await new Promise((resolve) => {\r\n//     authClient.login({\r\n//       identityProvider: `http://127.0.0.1:4943/?canisterId=${process.env.INTERNET_IDENTITY_CANISTER_ID}`,\r\n//       onSuccess: resolve,\r\n//     });\r\n//   });\r\n//   // At this point we're authenticated, and we can get the identity from the auth client:\r\n//   const identity = authClient.getIdentity();\r\n//   // Using the identity obtained from the auth client, we can create an agent to interact with the IC.\r\n//   const agent = new HttpAgent({ identity });\r\n//   // Using the interface description of our webapp, we create an actor that we use to call the service methods. We override the global actor, such that the other button handler will automatically use the new actor with the Internet Identity provided delegation.\r\n//   app_backend_actor = createActor(process.env.APP_BACKEND_CANISTER_ID, {\r\n//     agent,\r\n//   });\r\n//   app_backend_principal = identity.getPrincipal();\r\n\r\n//   document.getElementById(\"principal\").innerHTML = annotated_principal(app_backend_principal);\r\n\r\n//   fetched_symmetric_key = null;\r\n//   document.getElementById(\"get_symmetric_key_result\").innerText = \"\";\r\n//   update_plaintext_button_state();\r\n//   update_ciphertext_button_state();\r\n\r\n//   return false;\r\n// };\r\n\r\n// function annotated_principal(principal) {\r\n//   let principal_string = principal.toString();\r\n//   if (principal_string == \"2vxsx-fae\") {\r\n//     return \"Anonymous principal (2vxsx-fae)\";\r\n//   } else {\r\n//     return \"Principal: \" + principal_string;\r\n//   }\r\n// }\r\n\r\n// const hex_decode = (hexString) =>\r\n//   Uint8Array.from(hexString.match(/.{1,2}/g).map((byte) => parseInt(byte, 16)));\r\n// const hex_encode = (bytes) =>\r\n//   bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');"],"names":[],"sourceRoot":""}